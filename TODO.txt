Next Steps
----------

- Link docker to the git repo so don't need to keep rebuilding
- Make the zk-Snark 'worglcoin.code' check all bits of the hash (not just 256)
- Create a program that replicates the SHA256 hash function in Zokrates
- Integrate the new proof into Verifier.sol

Longer Term
-----------

- Need to sort out consumer and business identification
- Need to tighten up security - need to pass images, user generated content etc.
- Need to convert all Ether and Wei values into dollars so can see in real-time how much money it is
- Understand why the reduced navigation panel does not update (consumer sign up, business sign up)
- Show that a transaction has gone through successfully and tell the user (use Metamask event)?
- Add delivery address somehow - drop-off locations?
- Make Worlcoin into interface so that others businesses can accept it on their site
- Can you use a stablecoin? Stable-coin: https://www.arccy.org/


Docker Remove
-------------

$ docker ps -a

$ docker rm name_of_container


Zokrates Process
----------------

$ git clone https://github.com/JacobEberhardt/ZoKrates

$ cd ZoKrates

$ docker build -t zokrates .

$ docker run -ti zokrates /bin/bash

$ cd ZoKrates/target/release

$ ./zokrates compile -i '../../examples/sha256/worglcoin.code'

$ ./zokrates compute-witness -a 0 1 0 1 0 1 0 0 0 1 0 1 0 1 1 0 1 1 0 1 1 1 0 1 0 1 0 0 1 0 0 1 0 1 0 0 1 1 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 1 0 0 0 1 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 1 1 0 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 0 1 1 0 1 0 1 1 0 1 1 1 1 0 1 1 1 0 0 1 0 0 1 1 1 0 0 1 0 0 1 1 0 1 0 0 1 0 1 1 1 0 0 1 1 0 1 1 0 1 1 1 1 0 1 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

$ ./zokrates setup

$ ./zokrates export-verifier

$ cat verifier.sol

Copy this code to your smart contract

$ ./zokrates generate-proof

Copy these proofs as your parameters to the solidity function


SHA256 Algorithm
----------------

Input (ASCII): MatthewMorrison
In Binary: 010011010110000101110100011101000110100001100101011101110100110101101111011100100111001001101001011100110110111101101110
In Binary (Padded to
SHA256 Compression: 0101010001010110110111010100100100000101010000000101001110111101001011111111011111010111111010101010111011000011101000000110010111001011001010110011100010111111111111010011001011010000101111111011100100110101011111101100101111111101101010111010101110100011
First 32 characters: 0 1 0 1 0 1 0 0 0 1 0 1 0 1 1 0 1 1 0 1 1 1 0 1 0 1 0 0 1 0 0 1
